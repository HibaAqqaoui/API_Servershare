/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenApiDefinition);
  }
}(this, function(expect, OpenApiDefinition) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenApiDefinition.ControllerApi();
  });

  describe('(package)', function() {
    describe('ControllerApi', function() {
      describe('browseRemoteDirectory', function() {
        it('should call browseRemoteDirectory successfully', function(done) {
          // TODO: uncomment, update parameter values for browseRemoteDirectory call and complete the assertions
          /*

          instance.browseRemoteDirectory(path, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(OpenApiDefinition.FileDTO);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRemoteFile', function() {
        it('should call deleteRemoteFile successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRemoteFile call and complete the assertions
          /*

          instance.deleteRemoteFile(path, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApiDefinition.APIResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('downloadRemoteFile', function() {
        it('should call downloadRemoteFile successfully', function(done) {
          // TODO: uncomment, update parameter values for downloadRemoteFile call and complete the assertions
          /*

          instance.downloadRemoteFile(path, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Blob);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('renameRemoteFile', function() {
        it('should call renameRemoteFile successfully', function(done) {
          // TODO: uncomment, update parameter values for renameRemoteFile call and complete the assertions
          /*

          instance.renameRemoteFile(oldPath, newPath, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApiDefinition.APIResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadLocalFile', function() {
        it('should call uploadLocalFile successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadLocalFile call and complete the assertions
          /*
          var opts = {};

          instance.uploadLocalFile(remotePath, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApiDefinition.APIResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
