/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {APIResponse} from '../model/APIResponse';
import {FileDTO} from '../model/FileDTO';
import {ServerUploadBody} from '../model/ServerUploadBody';

/**
* Controller service.
* @module api/ControllerApi
* @version 1.0.0
*/
export class ControllerApi {

    /**
    * Constructs a new ControllerApi. 
    * @alias module:api/ControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the browseRemoteDirectory operation.
     * @callback moduleapi/ControllerApi~browseRemoteDirectoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FileDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {module:api/ControllerApi~browseRemoteDirectoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    browseRemoteDirectory(path, callback) {
      
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling browseRemoteDirectory");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'path': path
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [FileDTO];

      return this.apiClient.callApi(
        '/server/browse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteRemoteFile operation.
     * @callback moduleapi/ControllerApi~deleteRemoteFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {module:api/ControllerApi~deleteRemoteFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteRemoteFile(path, callback) {
      
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteRemoteFile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'path': path
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;

      return this.apiClient.callApi(
        '/server/delete', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the downloadRemoteFile operation.
     * @callback moduleapi/ControllerApi~downloadRemoteFileCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {module:api/ControllerApi~downloadRemoteFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    downloadRemoteFile(path, callback) {
      
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling downloadRemoteFile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'path': path
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Blob';

      return this.apiClient.callApi(
        '/server/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the renameRemoteFile operation.
     * @callback moduleapi/ControllerApi~renameRemoteFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} oldPath 
     * @param {String} newPath 
     * @param {module:api/ControllerApi~renameRemoteFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    renameRemoteFile(oldPath, newPath, callback) {
      
      let postBody = null;
      // verify the required parameter 'oldPath' is set
      if (oldPath === undefined || oldPath === null) {
        throw new Error("Missing the required parameter 'oldPath' when calling renameRemoteFile");
      }
      // verify the required parameter 'newPath' is set
      if (newPath === undefined || newPath === null) {
        throw new Error("Missing the required parameter 'newPath' when calling renameRemoteFile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'oldPath': oldPath,'newPath': newPath
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = APIResponse;

      return this.apiClient.callApi(
        '/server/rename', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the uploadLocalFile operation.
     * @callback moduleapi/ControllerApi~uploadLocalFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} remotePath 
     * @param {Object} opts Optional parameters
     * @param {module:model/ServerUploadBody} opts.body 
     * @param {module:api/ControllerApi~uploadLocalFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    uploadLocalFile(remotePath, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'remotePath' is set
      if (remotePath === undefined || remotePath === null) {
        throw new Error("Missing the required parameter 'remotePath' when calling uploadLocalFile");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'remotePath': remotePath
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = APIResponse;

      return this.apiClient.callApi(
        '/server/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}